!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!v[e])return;for(var n in v[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--g&&0===y&&I()}(e,n),t&&t(e,n)};var n,r=!0,o="57d0fc025d2fab8b731b",a=1e4,s={},c=[],i=[];function l(e){var t=H[e];if(!t)return O;var r=function(r){return t.hot.active?(H[r]?-1===H[r].parents.indexOf(e)&&H[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),O(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(t){O[e]=t}}};for(var a in O)Object.prototype.hasOwnProperty.call(O,a)&&"e"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===u&&p("prepare"),y++,O.e(e).then(t,function(e){throw t(),e});function t(){y--,"prepare"===u&&(b[e]||S(e),0===y&&0===g&&I())}},r}var d=[],u="idle";function p(e){u=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var f,m,h,g=0,y=0,b={},v={},w={};function x(e){return+e+""===e?+e:e}function M(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=a,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=O.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;v={},b={},w=e.c,h=e.h,p("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});m={};return S(0),"prepare"===u&&0===y&&0===g&&I(),t});var t}function S(e){w[e]?(v[e]=!0,g++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=O.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):b[e]=!0}function I(){p("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return j(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(x(n));e.resolve(t)}}function j(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var n,r,a,i,l;function d(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,s=o.chain;if((i=H[a])&&!i.hot._selfAccepted){if(i.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var c=0;c<i.parents.length;c++){var l=i.parents[c],d=H[l];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([l]),moduleId:a,parentId:l};-1===t.indexOf(l)&&(d.hot._acceptedDependencies[a]?(n[l]||(n[l]=[]),f(n[l],[a])):(delete n[l],t.push(l),r.push({chain:s.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var g={},y=[],b={},v=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var M in m)if(Object.prototype.hasOwnProperty.call(m,M)){var S;l=x(M);var I=!1,j=!1,E=!1,T="";switch((S=m[M]?d(l):{type:"disposed",moduleId:M}).chain&&(T="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(I=new Error("Aborted because of self decline: "+S.moduleId+T));break;case"declined":t.onDeclined&&t.onDeclined(S),t.ignoreDeclined||(I=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+T));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(S),t.ignoreUnaccepted||(I=new Error("Aborted because "+l+" is not accepted"+T));break;case"accepted":t.onAccepted&&t.onAccepted(S),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(S),E=!0;break;default:throw new Error("Unexception type "+S.type)}if(I)return p("abort"),Promise.reject(I);if(j)for(l in b[l]=m[l],f(y,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,l)&&(g[l]||(g[l]=[]),f(g[l],S.outdatedDependencies[l]));E&&(f(y,[S.moduleId]),b[l]=v)}var k,q=[];for(r=0;r<y.length;r++)l=y[r],H[l]&&H[l].hot._selfAccepted&&q.push({module:l,errorHandler:H[l].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var L,_,A=y.slice();A.length>0;)if(l=A.pop(),i=H[l]){var P={},D=i.hot._disposeHandlers;for(a=0;a<D.length;a++)(n=D[a])(P);for(s[l]=P,i.hot.active=!1,delete H[l],delete g[l],a=0;a<i.children.length;a++){var C=H[i.children[a]];C&&((k=C.parents.indexOf(l))>=0&&C.parents.splice(k,1))}}for(l in g)if(Object.prototype.hasOwnProperty.call(g,l)&&(i=H[l]))for(_=g[l],a=0;a<_.length;a++)L=_[a],(k=i.children.indexOf(L))>=0&&i.children.splice(k,1);for(l in p("apply"),o=h,b)Object.prototype.hasOwnProperty.call(b,l)&&(e[l]=b[l]);var U=null;for(l in g)if(Object.prototype.hasOwnProperty.call(g,l)&&(i=H[l])){_=g[l];var R=[];for(r=0;r<_.length;r++)if(L=_[r],n=i.hot._acceptedDependencies[L]){if(-1!==R.indexOf(n))continue;R.push(n)}for(r=0;r<R.length;r++){n=R[r];try{n(_)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:_[r],error:e}),t.ignoreErrored||U||(U=e)}}}for(r=0;r<q.length;r++){var N=q[r];l=N.module,c=[l];try{O(l)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||U||(U=e)}}return U?(p("fail"),Promise.reject(U)):(p("idle"),new Promise(function(e){e(y)}))}var H={};function O(t){if(H[t])return H[t].exports;var r=H[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:M,apply:j,status:function(e){if(!e)return u;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:s[e]};return n=void 0,t}(t),parents:(i=c,c=[],i),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}O.m=e,O.c=H,O.d=function(e,t,n){O.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},O.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},O.t=function(e,t){if(1&t&&(e=O(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(O.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)O.d(n,r,function(t){return e[t]}.bind(null,r));return n},O.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(t,"a",t),t},O.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},O.p="",O.h=function(){return o},l("./src/index.js")(O.s="./src/index.js")}({"./node_modules/css-loader/index.js!./src/css/task.css":function(e,t,n){(e.exports=n("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,".mathMet,\r\n.falsyMet,\r\n.audioMet{\r\n\twidth: 550px;\r\n\theight: 400px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tbackground-color: rgba(59, 237, 106, 0.3);\r\n\tborder-radius: 10px;\r\n\tposition: absolute;\r\n\tz-index: 5;\r\n\tleft: 38%;\r\n\ttop: 15%;\r\n\tdisplay: none;\r\n}\r\n\r\n.taskHeading,\r\n.task,\r\nlabel{\r\n\tmargin-top: 15px;\r\n\tfont-size: 25px;\r\n\tcolor: #fff;\r\n\tfont-weight: bold;\r\n\ttext-align: center;\r\n}\r\n\r\ninput{\r\n\tmargin-top: 15px;\r\n}\r\n\r\n",""])},"./node_modules/css-loader/lib/css-base.js":function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},"./node_modules/style-loader/lib/addStyles.js":function(e,t,n){var r,o,a={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),c=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),i=null,l=0,d=[],u=n("./node_modules/style-loader/lib/urls.js");function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(b(r.parts[s],t))}else{var c=[];for(s=0;s<r.parts.length;s++)c.push(b(r.parts[s],t));a[r.id]={id:r.id,refs:1,parts:c}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],s=t.base?a[0]+t.base:a[0],c={css:a[1],media:a[2],sourceMap:a[3]};r[s]?r[s].parts.push(c):n.push(r[s]={id:s,parts:[c]})}return n}function m(e,t){var n=c(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=c(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function g(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(t,e.attrs),m(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var s=l++;n=i||(i=g(t)),r=x.bind(null,n,s,!1),o=x.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),m(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),c=e.href;e.href=URL.createObjectURL(s),c&&URL.revokeObjectURL(c)}.bind(null,n,t),o=function(){h(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){h(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var s=n[o];(c=a[s.id]).refs--,r.push(c)}e&&p(f(e,t),t);for(o=0;o<r.length;o++){var c;if(0===(c=r[o]).refs){for(var i=0;i<c.parts.length;i++)c.parts[i]();delete a[c.id]}}}};var v,w=(v=[],function(e,t){return v[e]=t,v.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var a=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(a,s[t]):e.appendChild(a)}}},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./src/css/task.css":function(e,t,n){var r=n("./node_modules/css-loader/index.js!./src/css/task.css");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},a=n("./node_modules/style-loader/lib/addStyles.js")(r,o);r.locals&&(e.exports=r.locals),e.hot.accept("./node_modules/css-loader/index.js!./src/css/task.css",function(t){!function(){var t=n("./node_modules/css-loader/index.js!./src/css/task.css");if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");a(t)}()}),e.hot.dispose(function(){a()})},"./src/img/body1.png":function(e,t,n){e.exports=n.p+"68d3d3bf5a12d4389b13992816071dbc.png"},"./src/img/body2.png":function(e,t,n){e.exports=n.p+"a2e5203c1aa0a8a76f3acd61416da4bc.png"},"./src/img/body3.png":function(e,t,n){e.exports=n.p+"2856132fbf353ce3f8771eb8e29ac9d0.png"},"./src/img/game-background-earth.png":function(e,t,n){e.exports=n.p+"134478bab868f2db7348353ffcdd21d4.png"},"./src/img/head1.png":function(e,t,n){e.exports=n.p+"2f1f875274575abd22b6d598c239d534.png"},"./src/img/head2.png":function(e,t,n){e.exports=n.p+"c99a5f5f67611f52b7d09b4fed2b4786.png"},"./src/img/head3.png":function(e,t,n){e.exports=n.p+"4edaebba982195c1c5ffcbfdbc895df1.png"},"./src/img/legs1.png":function(e,t,n){e.exports=n.p+"713a295fb8065e2403d792e174df2076.png"},"./src/img/legs2.png":function(e,t,n){e.exports=n.p+"b8f49da5c38a5ad5e9d43325503444be.png"},"./src/img/legs3.png":function(e,t,n){e.exports=n.p+"e87957085eb5e7b7611e30be0f29d8bf.png"},"./src/img/main-hero.png":function(e,t,n){e.exports=n.p+"3e8d39583822b3ceaf9a962f5915a12f.png"},"./src/img/spell1.png":function(e,t,n){e.exports=n.p+"5c40142261a13fdaf17b4465d94a7690.png"},"./src/img/spell2.png":function(e,t,n){e.exports=n.p+"c9305f3dcdc9b6711f90df9e6e0c849c.png"},"./src/img/weapon1.png":function(e,t,n){e.exports=n.p+"bca04ae0b89e0d70d46032d3e4e57186.png"},"./src/img/weapon2.png":function(e,t,n){e.exports=n.p+"a43092e8806cbf47ecab48266aa8eb80.png"},"./src/img/weapon3.png":function(e,t,n){e.exports=n.p+"44f135ecb256170db2001fea2777bcbd.png"},"./src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./src/img/game-background-earth.png"),o=n.n(r);n("./src/css/task.css");var a=n("./src/img/head1.png"),s=n.n(a),c=n("./src/img/head2.png"),i=n.n(c),l=n("./src/img/head3.png"),d=n.n(l),u=n("./src/img/body1.png"),p=n.n(u),f=n("./src/img/body2.png"),m=n.n(f),h=n("./src/img/body3.png"),g=n.n(h),y=n("./src/img/legs1.png"),b=n.n(y),v=n("./src/img/legs2.png"),w=n.n(v),x=n("./src/img/legs3.png"),M=n.n(x),S=n("./src/img/weapon1.png"),I=n.n(S),j=n("./src/img/weapon2.png"),H=n.n(j),O=n("./src/img/weapon3.png"),E=n.n(O);function T(){const e=document.querySelector("canvas").getContext("2d");!function(){let e=document.querySelector(".monster-name"),t=["Terrible","Angry","Snotty"],n=["ogre","human","elf"],r=["Tom","James","Monica","Anton"],o=Math.floor(Math.random()*t.length),a=Math.floor(Math.random()*n.length),s=Math.floor(Math.random()*r.length),c=t[o]+" "+n[a]+" "+r[s];e.innerHTML=c}(),function(){let t=new Image,n=[p.a,m.a,g.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,1090,390)},t.src=n[r]}(),function(){let t=new Image,n=[s.a,i.a,d.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,1070,255)},t.src=n[r]}(),function(){let t=new Image,n=[b.a,w.a,M.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,1110,550)},t.src=n[r]}(),function(){let t=new Image,n=[I.a,H.a,E.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,990,360)},t.src=n[r]}()}function k(){const e=document.querySelector(".monster-HP"),t=document.querySelector("canvas").getContext("2d");let n=Math.floor(100*Math.random()+0),r=localStorage.getItem("monsterHP");if((r-=n)>0&&(localStorage.setItem("monsterHP",r),setTimeout(()=>{e.innerHTML=r+" HP"},3e3)),r<0){localStorage.setItem("monsterHP",100);let n=+localStorage.getItem("monstersKilled");n+=1,localStorage.setItem("monstersKilled",n),setTimeout(()=>{alert("Congradulations, you killed monster!"),e.innerHTML="100 HP",t.clearRect(900,200,400,395),T()},3e3)}}function q(){const e=document.querySelector(".mainHero-HP");let t=Math.floor(100*Math.random()+0),n=localStorage.getItem("mainHero");if((n-=t)>0&&(localStorage.setItem("mainHero",n),setTimeout(()=>{e.innerHTML=n+" HP"},3e3),alert("Your answer is incorrect")),n<=0){let t=+localStorage.getItem("monstersKilled"),n=+localStorage.getItem("curplayerid"),o=localStorage.getItem("rating");o=null==o?[]:JSON.parse(o);let a=JSON.parse(localStorage.getItem("players"))[n],s={name:a.lastName+" "+a.firstName,streak:t};o.push(s),o=o.sort((e,t)=>t.streak-e.streak).slice(0,10),localStorage.setItem("rating",JSON.stringify(o));const c=document.querySelector("#goLP"),i=document.querySelector(".game-over"),l=document.querySelector(".lowbody");let d=localStorage.getItem("rating");d=null==d?[]:JSON.parse(d);for(var r=0;r<d.length;r++){let e=document.createElement("tr"),t=document.createElement("td"),n=document.createElement("td");t.innerText=d[r].name,n.innerText=d[r].streak,e.appendChild(t),e.appendChild(n),l.appendChild(e)}setTimeout(()=>{e.innerHTML="0 HP",i.style.display="flex"},3e3),c.addEventListener("click",e=>{location.href="../../index.html"})}}var L=n("./src/img/spell2.png"),_=n.n(L);function A(){const e=document.querySelector("canvas").getContext("2d");let t=260,n=new Image;n.onload=function(){var r;(r=new Audio).src="../src/sound/deathPulse.mp3",r.volume=.5,r.autoplay=!0;let o=setInterval(()=>{e.clearRect(t,445,128,128),e.drawImage(n,t,445),t<900?t++:(e.clearRect(900,445,128,128),clearInterval(o))},3)},n.src=_.a}var P=n("./src/img/spell1.png"),D=n.n(P);function C(){const e=document.querySelector("canvas").getContext("2d");let t=900,n=new Image;n.onload=function(){!function(){let e=new Audio;e.src="../src/sound/dragonSlave.mp3",e.volume=.5,e.autoplay=!0}();let r=setInterval(()=>{e.clearRect(t,445,128,128),e.drawImage(n,t,445),t>260?t--:(e.clearRect(260,445,128,128),clearInterval(r))},3)},n.src=D.a}const U=document.querySelector("#callMathMet"),R=document.querySelector(".casts"),N=document.querySelector(".mathMet"),B=document.querySelector("#sendMathAnswer"),J=document.querySelector("#mathMainMenu"),F=document.querySelector("#userMathInput"),$=document.querySelector(".task");let G=[];U.addEventListener("click",e=>{R.style.display="none",N.style.display="flex",G=function(){let e=0,t=0,n=["+","-","/","*"],r=Math.floor(Math.random()*n.length);return e=Math.floor(100*Math.random()+0),t=Math.floor(100*Math.random()+0),[n[r],e,t]}(),$.innerHTML=G[1]+" "+G[0]+" "+G[2]});J.addEventListener("click",e=>{N.style.display="none",R.style.display="flex"}),B.addEventListener("click",e=>{F.value===function(){let e=0;switch(G[0]){case"+":return""+(e=G[1]+G[2]);case"-":return""+(e=G[1]-G[2]);case"*":return""+(e=G[1]*G[2]);case"/":return(e=G[1]/G[2]).toFixed(1)}}()?(k(),N.style.display="none",$.innerHTML="",A(),setTimeout(()=>{R.style.display="flex"},3e3)):(q(),N.style.display="none",$.innerHTML="",C(),setTimeout(()=>{R.style.display="flex"},3e3))});var K=n("./src/img/main-hero.png"),z=n.n(K);const X=document.querySelector(".casts"),W=document.querySelector(".audioMet"),Y=document.querySelector("#sendAudioAnswer"),Q=document.querySelector("#audioMainMenu"),V=document.querySelector("#callAudioMet"),Z=document.querySelector("#userAudioInput"),ee=document.querySelector("audio");let te=["../src/sound/activity.mp3","../src/sound/dog.mp3","../src/sound/global.mp3","../src/sound/inspiration.mp3","../src/sound/mind.mp3","../src/sound/strategy.mp3","../src/sound/transfer.mp3"],ne=0;V.addEventListener("click",e=>{X.style.display="none",ne=Math.floor(Math.random()*te.length),ee.src=te[ne],W.style.display="flex"});Q.addEventListener("click",e=>{W.style.display="none",X.style.display="flex"}),Y.addEventListener("click",e=>{Z.value===function(){switch(ne){case 0:return"activity";case 1:return"dog";case 2:return"global";case 3:return"inspiration";case 4:return"mind";case 5:return"strategy";case 6:return"transfer"}}()?(k(),W.style.display="none",ee.src="",A(),setTimeout(()=>{X.style.display="flex"},3e3)):(q(),W.style.display="none",ee.src="",C(),setTimeout(()=>{X.style.display="flex"},3e3))});const re=document.querySelector("#callFalsyMet"),oe=document.querySelector(".casts"),ae=document.querySelector(".falsyMet"),se=document.querySelector("#sendFalsyAnswer"),ce=document.querySelector("#FalsyMainMenu"),ie=document.querySelector("#userFalsyInput"),le=document.querySelector("#falsyText");let de=["Writer Mark Twain invented and patented a bra clasp","The Eiffel Tower in the summer becomes higher by 15 centimeters",'The space on the forehead between the eyebrows is called a "racket"',"The flea can accelerate faster than the space shuttle","Human DNA and banana are similar to 90%"],ue=0;re.addEventListener("click",e=>{oe.style.display="none",ue=Math.floor(Math.random()*de.length),le.innerHTML=de[ue],ae.style.display="flex"});ce.addEventListener("click",e=>{ae.style.display="none",oe.style.display="flex"}),se.addEventListener("click",e=>{ie.value===function(){switch(ue){case 0:case 1:return"true";case 2:return"false";case 3:return"true";case 4:return"false"}}()?(k(),ae.style.display="none",le.innerHTML="",A(),setTimeout(()=>{oe.style.display="flex"},3e3)):(q(),ae.style.display="none",le.innerHTML="",C(),setTimeout(()=>{oe.style.display="flex"},3e3))});let pe=document.createElement("canvas");pe.getContext("2d");pe.width=1280,pe.height=720,document.body.appendChild(pe),function(){const e=document.querySelector("canvas").getContext("2d");let t=new Image;t.onload=function(){e.drawImage(t,0,570)},t.src=o.a}(),function(){const e=document.querySelector("canvas").getContext("2d");let t=new Image;t.onload=function(){e.drawImage(t,100,445)},t.src=z.a}(),T(),localStorage.setItem("monsterHP",100),localStorage.setItem("mainHero",100);const fe=document.querySelector(".monster-HP"),me=document.querySelector(".mainHero-HP");fe.innerHTML="100 HP",me.innerHTML="100 HP"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,