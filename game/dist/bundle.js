!function(e){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,n){if(!w[e]||!v[e])return;for(var t in v[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(m[t]=n[t]);0==--h&&0===y&&I()}(e,t),n&&n(e,t)};var t,r=!0,o="f3b2d2d0287ea8842b80",a=1e4,c={},s=[],i=[];function d(e){var n=H[e];if(!n)return O;var r=function(r){return n.hot.active?(H[r]?-1===H[r].parents.indexOf(e)&&H[r].parents.push(e):(s=[e],t=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),O(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(n){O[e]=n}}};for(var a in O)Object.prototype.hasOwnProperty.call(O,a)&&"e"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===u&&p("prepare"),y++,O.e(e).then(n,function(e){throw n(),e});function n(){y--,"prepare"===u&&(b[e]||S(e),0===y&&0===h&&I())}},r}var l=[],u="idle";function p(e){u=e;for(var n=0;n<l.length;n++)l[n].call(null,e)}var f,m,g,h=0,y=0,b={},v={},w={};function x(e){return+e+""===e?+e:e}function M(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(n=a,n=n||1e4,new Promise(function(e,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var r=new XMLHttpRequest,a=O.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=n,r.send(null)}catch(e){return t(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)t(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)t(new Error("Manifest request to "+a+" failed."));else{try{var n=JSON.parse(r.responseText)}catch(e){return void t(e)}e(n)}}})).then(function(e){if(!e)return p("idle"),null;v={},b={},w=e.c,g=e.h,p("prepare");var n=new Promise(function(e,n){f={resolve:e,reject:n}});m={};return S(0),"prepare"===u&&0===y&&0===h&&I(),n});var n}function S(e){w[e]?(v[e]=!0,h++,function(e){var n=document.getElementsByTagName("head")[0],t=document.createElement("script");t.charset="utf-8",t.src=O.p+""+e+"."+o+".hot-update.js",n.appendChild(t)}(e)):b[e]=!0}function I(){p("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return j(r)}).then(function(n){e.resolve(n)},function(n){e.reject(n)});else{var n=[];for(var t in m)Object.prototype.hasOwnProperty.call(m,t)&&n.push(x(t));e.resolve(n)}}function j(n){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var t,r,a,i,d;function l(e){for(var n=[e],t={},r=n.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,c=o.chain;if((i=H[a])&&!i.hot._selfAccepted){if(i.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:c,moduleId:a};for(var s=0;s<i.parents.length;s++){var d=i.parents[s],l=H[d];if(l){if(l.hot._declinedDependencies[a])return{type:"declined",chain:c.concat([d]),moduleId:a,parentId:d};-1===n.indexOf(d)&&(l.hot._acceptedDependencies[a]?(t[d]||(t[d]=[]),f(t[d],[a])):(delete t[d],n.push(d),r.push({chain:c.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function f(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}n=n||{};var h={},y=[],b={},v=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var M in m)if(Object.prototype.hasOwnProperty.call(m,M)){var S;d=x(M);var I=!1,j=!1,E=!1,_="";switch((S=m[M]?l(d):{type:"disposed",moduleId:M}).chain&&(_="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(I=new Error("Aborted because of self decline: "+S.moduleId+_));break;case"declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(I=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+_));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(S),n.ignoreUnaccepted||(I=new Error("Aborted because "+d+" is not accepted"+_));break;case"accepted":n.onAccepted&&n.onAccepted(S),j=!0;break;case"disposed":n.onDisposed&&n.onDisposed(S),E=!0;break;default:throw new Error("Unexception type "+S.type)}if(I)return p("abort"),Promise.reject(I);if(j)for(d in b[d]=m[d],f(y,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,d)&&(h[d]||(h[d]=[]),f(h[d],S.outdatedDependencies[d]));E&&(f(y,[S.moduleId]),b[d]=v)}var k,q=[];for(r=0;r<y.length;r++)d=y[r],H[d]&&H[d].hot._selfAccepted&&q.push({module:d,errorHandler:H[d].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var A,L,P=y.slice();P.length>0;)if(d=P.pop(),i=H[d]){var T={},D=i.hot._disposeHandlers;for(a=0;a<D.length;a++)(t=D[a])(T);for(c[d]=T,i.hot.active=!1,delete H[d],delete h[d],a=0;a<i.children.length;a++){var U=H[i.children[a]];U&&((k=U.parents.indexOf(d))>=0&&U.parents.splice(k,1))}}for(d in h)if(Object.prototype.hasOwnProperty.call(h,d)&&(i=H[d]))for(L=h[d],a=0;a<L.length;a++)A=L[a],(k=i.children.indexOf(A))>=0&&i.children.splice(k,1);for(d in p("apply"),o=g,b)Object.prototype.hasOwnProperty.call(b,d)&&(e[d]=b[d]);var R=null;for(d in h)if(Object.prototype.hasOwnProperty.call(h,d)&&(i=H[d])){L=h[d];var C=[];for(r=0;r<L.length;r++)if(A=L[r],t=i.hot._acceptedDependencies[A]){if(-1!==C.indexOf(t))continue;C.push(t)}for(r=0;r<C.length;r++){t=C[r];try{t(L)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:d,dependencyId:L[r],error:e}),n.ignoreErrored||R||(R=e)}}}for(r=0;r<q.length;r++){var N=q[r];d=N.module,s=[d];try{O(d)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:t,originalError:e}),n.ignoreErrored||R||(R=t),R||(R=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:d,error:e}),n.ignoreErrored||R||(R=e)}}return R?(p("fail"),Promise.reject(R)):(p("idle"),new Promise(function(e){e(y)}))}var H={};function O(n){if(H[n])return H[n].exports;var r=H[n]={i:n,l:!1,exports:{},hot:function(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:t!==e,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},check:M,apply:j,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var n=l.indexOf(e);n>=0&&l.splice(n,1)},data:c[e]};return t=void 0,n}(n),parents:(i=s,s=[],i),children:[]};return e[n].call(r.exports,r,r.exports,d(n)),r.l=!0,r.exports}O.m=e,O.c=H,O.d=function(e,n,t){O.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},O.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},O.t=function(e,n){if(1&n&&(e=O(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(O.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)O.d(t,r,function(n){return e[n]}.bind(null,r));return t},O.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(n,"a",n),n},O.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},O.p="",O.h=function(){return o},d("./src/index.js")(O.s="./src/index.js")}({"./node_modules/css-loader/index.js!./src/css/task.css":function(e,n,t){(e.exports=t("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,".mathMet,\r\n.transMet,\r\n.audioMet{\r\n\twidth: 550px;\r\n\theight: 400px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tbackground-color: rgba(59, 237, 106, 0.3);\r\n\tborder-radius: 10px;\r\n\tposition: absolute;\r\n\tz-index: 5;\r\n\tleft: 38%;\r\n\ttop: 15%;\r\n\tdisplay: none;\r\n}\r\n\r\n.taskHeading,\r\n.task,\r\nlabel{\r\n\tmargin-top: 15px;\r\n\tfont-size: 25px;\r\n\tcolor: #fff;\r\n\tfont-weight: bold;\r\n}\r\n\r\ninput{\r\n\tmargin-top: 15px;\r\n}",""])},"./node_modules/css-loader/lib/css-base.js":function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var o=(c=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(c))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[t].concat(a).concat([o]).join("\n")}var c;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var c=e[o];"number"==typeof c[0]&&r[c[0]]||(t&&!c[2]?c[2]=t:t&&(c[2]="("+c[2]+") and ("+t+")"),n.push(c))}},n}},"./node_modules/style-loader/lib/addStyles.js":function(e,n,t){var r,o,a={},c=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var n={};return function(e){if("function"==typeof e)return e();if(void 0===n[e]){var t=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}}(),i=null,d=0,l=[],u=t("./node_modules/style-loader/lib/urls.js");function p(e,n){for(var t=0;t<e.length;t++){var r=e[t],o=a[r.id];if(o){o.refs++;for(var c=0;c<o.parts.length;c++)o.parts[c](r.parts[c]);for(;c<r.parts.length;c++)o.parts.push(b(r.parts[c],n))}else{var s=[];for(c=0;c<r.parts.length;c++)s.push(b(r.parts[c],n));a[r.id]={id:r.id,refs:1,parts:s}}}}function f(e,n){for(var t=[],r={},o=0;o<e.length;o++){var a=e[o],c=n.base?a[0]+n.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[c]?r[c].parts.push(s):t.push(r[c]={id:c,parts:[s]})}return t}function m(e,n){var t=s(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=l[l.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),l.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,o)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=l.indexOf(e);n>=0&&l.splice(n,1)}function h(e){var n=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(n,e.attrs),m(e,n),n}function y(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function b(e,n){var t,r,o,a;if(n.transform&&e.css){if(!(a=n.transform(e.css)))return function(){};e.css=a}if(n.singleton){var c=d++;t=i||(i=h(n)),r=x.bind(null,t,c,!1),o=x.bind(null,t,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(n,e.attrs),m(e,n),n}(n),r=function(e,n,t){var r=t.css,o=t.sourceMap,a=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||a)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var c=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(c),s&&URL.revokeObjectURL(s)}.bind(null,t,n),o=function(){g(t),t.href&&URL.revokeObjectURL(t.href)}):(t=h(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){g(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=c()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=f(e,n);return p(t,n),function(e){for(var r=[],o=0;o<t.length;o++){var c=t[o];(s=a[c.id]).refs--,r.push(s)}e&&p(f(e,n),n);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var i=0;i<s.parts.length;i++)s.parts[i]();delete a[s.id]}}}};var v,w=(v=[],function(e,n){return v[e]=n,v.filter(Boolean).join("\n")});function x(e,n,t,r){var o=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(n,o);else{var a=document.createTextNode(o),c=e.childNodes;c[n]&&e.removeChild(c[n]),c.length?e.insertBefore(a,c[n]):e.appendChild(a)}}},"./node_modules/style-loader/lib/urls.js":function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,a=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?t+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./src/css/task.css":function(e,n,t){var r=t("./node_modules/css-loader/index.js!./src/css/task.css");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},a=t("./node_modules/style-loader/lib/addStyles.js")(r,o);r.locals&&(e.exports=r.locals),e.hot.accept("./node_modules/css-loader/index.js!./src/css/task.css",function(n){!function(){var n=t("./node_modules/css-loader/index.js!./src/css/task.css");if("string"==typeof n&&(n=[[e.i,n,""]]),!function(e,n){var t,r=0;for(t in e){if(!n||e[t]!==n[t])return!1;r++}for(t in n)r--;return 0===r}(r.locals,n.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");a(n)}()}),e.hot.dispose(function(){a()})},"./src/img/body1.png":function(e,n,t){e.exports=t.p+"68d3d3bf5a12d4389b13992816071dbc.png"},"./src/img/body2.png":function(e,n,t){e.exports=t.p+"a2e5203c1aa0a8a76f3acd61416da4bc.png"},"./src/img/body3.png":function(e,n,t){e.exports=t.p+"2856132fbf353ce3f8771eb8e29ac9d0.png"},"./src/img/game-background-earth.png":function(e,n,t){e.exports=t.p+"134478bab868f2db7348353ffcdd21d4.png"},"./src/img/head1.png":function(e,n,t){e.exports=t.p+"2f1f875274575abd22b6d598c239d534.png"},"./src/img/head2.png":function(e,n,t){e.exports=t.p+"c99a5f5f67611f52b7d09b4fed2b4786.png"},"./src/img/head3.png":function(e,n,t){e.exports=t.p+"4edaebba982195c1c5ffcbfdbc895df1.png"},"./src/img/legs1.png":function(e,n,t){e.exports=t.p+"713a295fb8065e2403d792e174df2076.png"},"./src/img/legs2.png":function(e,n,t){e.exports=t.p+"b8f49da5c38a5ad5e9d43325503444be.png"},"./src/img/legs3.png":function(e,n,t){e.exports=t.p+"e87957085eb5e7b7611e30be0f29d8bf.png"},"./src/img/main-hero.png":function(e,n,t){e.exports=t.p+"3e8d39583822b3ceaf9a962f5915a12f.png"},"./src/img/spell1.png":function(e,n,t){e.exports=t.p+"5c40142261a13fdaf17b4465d94a7690.png"},"./src/img/spell2.png":function(e,n,t){e.exports=t.p+"c9305f3dcdc9b6711f90df9e6e0c849c.png"},"./src/img/weapon1.png":function(e,n,t){e.exports=t.p+"bca04ae0b89e0d70d46032d3e4e57186.png"},"./src/img/weapon2.png":function(e,n,t){e.exports=t.p+"a43092e8806cbf47ecab48266aa8eb80.png"},"./src/img/weapon3.png":function(e,n,t){e.exports=t.p+"44f135ecb256170db2001fea2777bcbd.png"},"./src/index.js":function(e,n,t){"use strict";t.r(n);var r=t("./src/img/game-background-earth.png"),o=t.n(r);t("./src/css/task.css");var a=t("./src/img/head1.png"),c=t.n(a),s=t("./src/img/head2.png"),i=t.n(s),d=t("./src/img/head3.png"),l=t.n(d),u=t("./src/img/body1.png"),p=t.n(u),f=t("./src/img/body2.png"),m=t.n(f),g=t("./src/img/body3.png"),h=t.n(g),y=t("./src/img/legs1.png"),b=t.n(y),v=t("./src/img/legs2.png"),w=t.n(v),x=t("./src/img/legs3.png"),M=t.n(x),S=t("./src/img/weapon1.png"),I=t.n(S),j=t("./src/img/weapon2.png"),H=t.n(j),O=t("./src/img/weapon3.png"),E=t.n(O);function _(){const e=document.querySelector("canvas").getContext("2d");!function(){let e=document.querySelector(".monster-name"),n=["Terrible","Angry","Snotty"],t=["ogre","human","elf"],r=["Tom","James","Monica","Anton"],o=Math.floor(Math.random()*n.length),a=Math.floor(Math.random()*t.length),c=Math.floor(Math.random()*r.length),s=n[o]+" "+t[a]+" "+r[c];e.innerHTML=s}(),function(){let n=new Image,t=[p.a,m.a,h.a],r=Math.floor(Math.random()*t.length);n.onload=function(){e.drawImage(n,1090,390)},n.src=t[r]}(),function(){let n=new Image,t=[c.a,i.a,l.a],r=Math.floor(Math.random()*t.length);n.onload=function(){e.drawImage(n,1070,255)},n.src=t[r]}(),function(){let n=new Image,t=[b.a,w.a,M.a],r=Math.floor(Math.random()*t.length);n.onload=function(){e.drawImage(n,1110,550)},n.src=t[r]}(),function(){let n=new Image,t=[I.a,H.a,E.a],r=Math.floor(Math.random()*t.length);n.onload=function(){e.drawImage(n,990,360)},n.src=t[r]}()}function k(){const e=document.querySelector(".monster-HP"),n=document.querySelector("canvas").getContext("2d");let t=Math.floor(100*Math.random()+0),r=localStorage.getItem("monsterHP");if((r-=t)>0&&(localStorage.setItem("monsterHP",r),setTimeout(()=>{e.innerHTML=r+" HP"},3e3)),r<0){localStorage.setItem("monsterHP",100);let t=+localStorage.getItem("monstersKilled");t+=1,localStorage.setItem("monstersKilled",t);let r=+localStorage.getItem("curplayerid");JSON.parse(localStorage.getItem("players"))[r];setTimeout(()=>{alert("Congradulations, you killed monster!"),e.innerHTML="100 HP",n.clearRect(900,200,400,395),_()},3e3)}}function q(){const e=document.querySelector(".mainHero-HP");let n=Math.floor(100*Math.random()+0),t=localStorage.getItem("mainHero");(t-=n)>0&&localStorage.setItem("mainHero",t),e.innerHTML=t+" HP",alert("Your answer is incorrect")}var A=t("./src/img/spell2.png"),L=t.n(A);function P(){const e=document.querySelector("canvas").getContext("2d");let n=260,t=new Image;t.onload=function(){var r;(r=new Audio).src="../src/sound/deathPulse.mp3",r.volume=.5,r.autoplay=!0;let o=setInterval(()=>{e.clearRect(n,445,128,128),e.drawImage(t,n,445),n<900?n++:(e.clearRect(900,445,128,128),clearInterval(o))},3)},t.src=L.a}var T=t("./src/img/spell1.png"),D=t.n(T);function U(){const e=document.querySelector("canvas").getContext("2d");let n=900,t=new Image;t.onload=function(){!function(){let e=new Audio;e.src="../src/sound/dragonSlave.mp3",e.volume=.5,e.autoplay=!0}();let r=setInterval(()=>{e.clearRect(n,445,128,128),e.drawImage(t,n,445),n>260?n--:(e.clearRect(260,445,128,128),clearInterval(r))},3)},t.src=D.a}const R=document.querySelector("#callMathMet"),C=document.querySelector(".casts"),N=document.querySelector(".mathMet"),B=document.querySelector("#sendMathAnswer"),J=document.querySelector("#mathMainMenu"),$=document.querySelector("#userMathInput"),F=document.querySelector(".task");let G=[];R.addEventListener("click",e=>{C.style.display="none",N.style.display="flex",G=function(){let e=0,n=0,t=["+","-","/","*"],r=Math.floor(Math.random()*t.length);return e=Math.floor(100*Math.random()+0),n=Math.floor(100*Math.random()+0),[t[r],e,n]}(),F.innerHTML=G[1]+" "+G[0]+" "+G[2]});J.addEventListener("click",e=>{N.style.display="none",C.style.display="flex"}),B.addEventListener("click",e=>{$.value===function(){let e=0;switch(G[0]){case"+":return""+(e=G[1]+G[2]);case"-":return""+(e=G[1]-G[2]);case"*":return""+(e=G[1]*G[2]);case"/":return(e=G[1]/G[2]).toFixed(1)}}()?(k(),N.style.display="none",F.innerHTML="",P(),setTimeout(()=>{C.style.display="flex"},3e3)):(q(),N.style.display="none",F.innerHTML="",U(),setTimeout(()=>{C.style.display="flex"},3e3))});var z=t("./src/img/main-hero.png"),K=t.n(z);const X=document.querySelector(".casts"),Y=document.querySelector(".transMet");document.querySelector("#sendAnswer"),document.querySelector("#mainMenu");document.querySelector("#callTransMet").addEventListener("click",e=>{X.style.display="none",Y.style.display="flex",console.log(dictionary)});const Q=document.querySelector(".casts"),V=document.querySelector(".audioMet"),W=document.querySelector("#sendAudioAnswer"),Z=document.querySelector("#audioMainMenu"),ee=document.querySelector("#callAudioMet"),ne=document.querySelector("#userAudioInput"),te=document.querySelector("audio");let re=["../src/sound/activity.mp3","../src/sound/dog.mp3","../src/sound/global.mp3","../src/sound/inspiration.mp3","../src/sound/mind.mp3","../src/sound/strategy.mp3","../src/sound/transfer.mp3"],oe=0;ee.addEventListener("click",e=>{Q.style.display="none",oe=Math.floor(Math.random()*re.length),te.src=re[oe],V.style.display="flex"});Z.addEventListener("click",e=>{V.style.display="none",Q.style.display="flex"}),W.addEventListener("click",e=>{ne.value===function(){switch(oe){case 0:return"activity";case 1:return"dog";case 2:return"global";case 3:return"inspiration";case 4:return"mind";case 5:return"strategy";case 6:return"transfer"}}()?(k(),V.style.display="none",te.src="",P(),setTimeout(()=>{Q.style.display="flex"},3e3)):(q(),V.style.display="none",te.src="",U(),setTimeout(()=>{Q.style.display="flex"},3e3))});let ae=document.createElement("canvas");ae.getContext("2d");ae.width=1280,ae.height=720,document.body.appendChild(ae),function(){const e=document.querySelector("canvas").getContext("2d");let n=new Image;n.onload=function(){e.drawImage(n,0,570)},n.src=o.a}(),function(){const e=document.querySelector("canvas").getContext("2d");let n=new Image;n.onload=function(){e.drawImage(n,100,445)},n.src=K.a}(),_(),localStorage.setItem("monsterHP",100),localStorage.setItem("mainHero",100);const ce=document.querySelector(".monster-HP"),se=document.querySelector(".mainHero-HP");ce.innerHTML="100 HP",se.innerHTML="100 HP"}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,