!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!M[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(y[n]=t[n]);0==--h&&0===g&&q()}(e,n),t&&t(e,n)};var n,r=!0,o="0ac90faae753c309a6b4",s=1e4,a={},l=[],c=[];function i(e){var t=T[e];if(!t)return L;var r=function(r){return t.hot.active?(T[r]?-1===T[r].parents.indexOf(e)&&T[r].parents.push(e):(l=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),l=[]),L(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return L[e]},set:function(t){L[e]=t}}};for(var s in L)Object.prototype.hasOwnProperty.call(L,s)&&"e"!==s&&Object.defineProperty(r,s,o(s));return r.e=function(e){return"ready"===u&&p("prepare"),g++,L.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===u&&(v[e]||w(e),0===g&&0===h&&q())}},r}var d=[],u="idle";function p(e){u=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var f,y,m,h=0,g=0,v={},b={},M={};function S(e){return+e+""===e?+e:e}function x(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=s,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,s=L.p+""+o+".hot-update.json";r.open("GET",s,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+s+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+s+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;b={},v={},M=e.c,m=e.h,p("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});y={};return w(0),"prepare"===u&&0===g&&0===h&&q(),t});var t}function w(e){M[e]?(b[e]=!0,h++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=L.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):v[e]=!0}function q(){p("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then(function(){return k(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in y)Object.prototype.hasOwnProperty.call(y,n)&&t.push(S(n));e.resolve(t)}}function k(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");var n,r,s,c,i;function d(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),s=o.id,a=o.chain;if((c=T[s])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:s};if(c.hot._main)return{type:"unaccepted",chain:a,moduleId:s};for(var l=0;l<c.parents.length;l++){var i=c.parents[l],d=T[i];if(d){if(d.hot._declinedDependencies[s])return{type:"declined",chain:a.concat([i]),moduleId:s,parentId:i};-1===t.indexOf(i)&&(d.hot._acceptedDependencies[s]?(n[i]||(n[i]=[]),f(n[i],[s])):(delete n[i],t.push(i),r.push({chain:a.concat([i]),id:i})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},g=[],v={},b=function(){console.warn("[HMR] unexpected require("+w.moduleId+") to disposed module")};for(var x in y)if(Object.prototype.hasOwnProperty.call(y,x)){var w;i=S(x);var q=!1,k=!1,j=!1,H="";switch((w=y[x]?d(i):{type:"disposed",moduleId:x}).chain&&(H="\nUpdate propagation: "+w.chain.join(" -> ")),w.type){case"self-declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(q=new Error("Aborted because of self decline: "+w.moduleId+H));break;case"declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(q=new Error("Aborted because of declined dependency: "+w.moduleId+" in "+w.parentId+H));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(w),t.ignoreUnaccepted||(q=new Error("Aborted because "+i+" is not accepted"+H));break;case"accepted":t.onAccepted&&t.onAccepted(w),k=!0;break;case"disposed":t.onDisposed&&t.onDisposed(w),j=!0;break;default:throw new Error("Unexception type "+w.type)}if(q)return p("abort"),Promise.reject(q);if(k)for(i in v[i]=y[i],f(g,w.outdatedModules),w.outdatedDependencies)Object.prototype.hasOwnProperty.call(w.outdatedDependencies,i)&&(h[i]||(h[i]=[]),f(h[i],w.outdatedDependencies[i]));j&&(f(g,[w.moduleId]),v[i]=b)}var I,E=[];for(r=0;r<g.length;r++)i=g[r],T[i]&&T[i].hot._selfAccepted&&E.push({module:i,errorHandler:T[i].hot._selfAccepted});p("dispose"),Object.keys(M).forEach(function(e){!1===M[e]&&function(e){delete installedChunks[e]}(e)});for(var O,_,A=g.slice();A.length>0;)if(i=A.pop(),c=T[i]){var P={},R=c.hot._disposeHandlers;for(s=0;s<R.length;s++)(n=R[s])(P);for(a[i]=P,c.hot.active=!1,delete T[i],delete h[i],s=0;s<c.children.length;s++){var D=T[c.children[s]];D&&((I=D.parents.indexOf(i))>=0&&D.parents.splice(I,1))}}for(i in h)if(Object.prototype.hasOwnProperty.call(h,i)&&(c=T[i]))for(_=h[i],s=0;s<_.length;s++)O=_[s],(I=c.children.indexOf(O))>=0&&c.children.splice(I,1);for(i in p("apply"),o=m,v)Object.prototype.hasOwnProperty.call(v,i)&&(e[i]=v[i]);var C=null;for(i in h)if(Object.prototype.hasOwnProperty.call(h,i)&&(c=T[i])){_=h[i];var U=[];for(r=0;r<_.length;r++)if(O=_[r],n=c.hot._acceptedDependencies[O]){if(-1!==U.indexOf(n))continue;U.push(n)}for(r=0;r<U.length;r++){n=U[r];try{n(_)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:i,dependencyId:_[r],error:e}),t.ignoreErrored||C||(C=e)}}}for(r=0;r<E.length;r++){var N=E[r];i=N.module,l=[i];try{L(i)}catch(e){if("function"==typeof N.errorHandler)try{N.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:i,error:n,originalError:e}),t.ignoreErrored||C||(C=n),C||(C=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:i,error:e}),t.ignoreErrored||C||(C=e)}}return C?(p("fail"),Promise.reject(C)):(p("idle"),new Promise(function(e){e(g)}))}var T={};function L(t){if(T[t])return T[t].exports;var r=T[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:x,apply:k,status:function(e){if(!e)return u;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(c=l,l=[],c),children:[]};return e[t].call(r.exports,r,r.exports,i(t)),r.l=!0,r.exports}L.m=e,L.c=T,L.d=function(e,t,n){L.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},L.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},L.t=function(e,t){if(1&t&&(e=L(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(L.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)L.d(n,r,function(t){return e[t]}.bind(null,r));return n},L.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return L.d(t,"a",t),t},L.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},L.p="",L.h=function(){return o},i("./src/index.js")(L.s="./src/index.js")}({"./node_modules/css-loader/index.js!./src/css/task.css":function(e,t,n){(e.exports=n("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,".mathMet,\r\n.falsyMet,\r\n.audioMet,\r\n.translateMet,\r\n.missedMet,\r\n.seqMet,\r\n.actMet,\r\n.qMet,\r\n.lessMet{\r\n\twidth: 550px;\r\n\theight: 400px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tbackground-color: rgba(59, 237, 106, 0.3);\r\n\tborder-radius: 10px;\r\n\tposition: absolute;\r\n\tz-index: 5;\r\n\tleft: 35%;\r\n\ttop: 10%;\r\n\tdisplay: none;\r\n}\r\n\r\n.actMet{\r\n\twidth: 550px;\r\n\theight: 480px;\r\n}\r\n\r\n.taskHeading,\r\n.task,\r\nlabel{\r\n\tmargin-top: 15px;\r\n\tfont-size: 25px;\r\n\tcolor: #fff;\r\n\tfont-weight: bold;\r\n\ttext-align: center;\r\n}\r\n\r\ninput{\r\n\tmargin-top: 15px;\r\n}\r\n\r\n",""])},"./node_modules/css-loader/lib/css-base.js":function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),s=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(s).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(r[s]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},"./node_modules/style-loader/lib/addStyles.js":function(e,t,n){var r,o,s={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,i=0,d=[],u=n("./node_modules/style-loader/lib/urls.js");function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=s[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(v(r.parts[a],t));s[r.id]={id:r.id,refs:1,parts:l}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var s=e[o],a=t.base?s[0]+t.base:s[0],l={css:s[1],media:s[2],sourceMap:s[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function y(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function h(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),g(t,e.attrs),y(e,t),t}function g(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,s;if(t.transform&&e.css){if(!(s=t.transform(e.css)))return function(){};e.css=s}if(t.singleton){var a=i++;n=c||(c=h(t)),r=S.bind(null,n,a,!1),o=S.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",g(t,e.attrs),y(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,s=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||s)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=s[a.id]).refs--,r.push(l)}e&&p(f(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var c=0;c<l.parts.length;c++)l.parts[c]();delete s[l.id]}}}};var b,M=(b=[],function(e,t){return b[e]=t,b.filter(Boolean).join("\n")});function S(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=M(t,o);else{var s=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(s,a[t]):e.appendChild(s)}}},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,s=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:r+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./src/css/task.css":function(e,t,n){var r=n("./node_modules/css-loader/index.js!./src/css/task.css");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},s=n("./node_modules/style-loader/lib/addStyles.js")(r,o);r.locals&&(e.exports=r.locals),e.hot.accept("./node_modules/css-loader/index.js!./src/css/task.css",function(t){!function(){var t=n("./node_modules/css-loader/index.js!./src/css/task.css");if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");s(t)}()}),e.hot.dispose(function(){s()})},"./src/img/body1.png":function(e,t,n){e.exports=n.p+"68d3d3bf5a12d4389b13992816071dbc.png"},"./src/img/body2.png":function(e,t,n){e.exports=n.p+"a2e5203c1aa0a8a76f3acd61416da4bc.png"},"./src/img/body3.png":function(e,t,n){e.exports=n.p+"2856132fbf353ce3f8771eb8e29ac9d0.png"},"./src/img/game-background-earth.png":function(e,t,n){e.exports=n.p+"134478bab868f2db7348353ffcdd21d4.png"},"./src/img/head1.png":function(e,t,n){e.exports=n.p+"2f1f875274575abd22b6d598c239d534.png"},"./src/img/head2.png":function(e,t,n){e.exports=n.p+"c99a5f5f67611f52b7d09b4fed2b4786.png"},"./src/img/head3.png":function(e,t,n){e.exports=n.p+"4edaebba982195c1c5ffcbfdbc895df1.png"},"./src/img/legs1.png":function(e,t,n){e.exports=n.p+"713a295fb8065e2403d792e174df2076.png"},"./src/img/legs2.png":function(e,t,n){e.exports=n.p+"b8f49da5c38a5ad5e9d43325503444be.png"},"./src/img/legs3.png":function(e,t,n){e.exports=n.p+"e87957085eb5e7b7611e30be0f29d8bf.png"},"./src/img/main-hero.png":function(e,t,n){e.exports=n.p+"3e8d39583822b3ceaf9a962f5915a12f.png"},"./src/img/spell1.png":function(e,t,n){e.exports=n.p+"5c40142261a13fdaf17b4465d94a7690.png"},"./src/img/spell2.png":function(e,t,n){e.exports=n.p+"c9305f3dcdc9b6711f90df9e6e0c849c.png"},"./src/img/weapon1.png":function(e,t,n){e.exports=n.p+"bca04ae0b89e0d70d46032d3e4e57186.png"},"./src/img/weapon2.png":function(e,t,n){e.exports=n.p+"a43092e8806cbf47ecab48266aa8eb80.png"},"./src/img/weapon3.png":function(e,t,n){e.exports=n.p+"44f135ecb256170db2001fea2777bcbd.png"},"./src/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./src/img/game-background-earth.png"),o=n.n(r);var s=n("./src/img/main-hero.png"),a=n.n(s);var l=n("./src/img/head1.png"),c=n.n(l),i=n("./src/img/head2.png"),d=n.n(i),u=n("./src/img/head3.png"),p=n.n(u),f=n("./src/img/body1.png"),y=n.n(f),m=n("./src/img/body2.png"),h=n.n(m),g=n("./src/img/body3.png"),v=n.n(g),b=n("./src/img/legs1.png"),M=n.n(b),S=n("./src/img/legs2.png"),x=n.n(S),w=n("./src/img/legs3.png"),q=n.n(w),k=n("./src/img/weapon1.png"),T=n.n(k),L=n("./src/img/weapon2.png"),j=n.n(L),H=n("./src/img/weapon3.png"),I=n.n(H);function E(){const e=document.querySelector("canvas").getContext("2d");!function(){let e=document.querySelector(".monster-name"),t=["Terrible","Angry","Snotty"],n=["ogre","human","elf"],r=["Tom","James","Monica","Anton"],o=Math.floor(Math.random()*t.length),s=Math.floor(Math.random()*n.length),a=Math.floor(Math.random()*r.length),l=t[o]+" "+n[s]+" "+r[a];e.innerHTML=l}(),function(){let t=new Image,n=[y.a,h.a,v.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,1090,390)},t.src=n[r]}(),function(){let t=new Image,n=[c.a,d.a,p.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,1070,255)},t.src=n[r]}(),function(){let t=new Image,n=[M.a,x.a,q.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,1110,550)},t.src=n[r]}(),function(){let t=new Image,n=[T.a,j.a,I.a],r=Math.floor(Math.random()*n.length);t.onload=function(){e.drawImage(t,990,360)},t.src=n[r]}()}n("./src/css/task.css");function O(){const e=document.querySelector(".monster-HP"),t=document.querySelector("canvas").getContext("2d");let n=Math.floor(100*Math.random()+0),r=localStorage.getItem("monsterHP");if((r-=n)>0&&(localStorage.setItem("monsterHP",r),setTimeout(()=>{e.innerHTML=r+" HP"},3e3)),r<0){localStorage.setItem("monsterHP",100);let n=+localStorage.getItem("monstersKilled");n+=1,localStorage.setItem("monstersKilled",n),setTimeout(()=>{alert("Congradulations, you killed monster!"),e.innerHTML="100 HP",t.clearRect(900,200,400,395),E()},3e3)}}function _(){const e=document.querySelector(".mainHero-HP");let t=Math.floor(50*Math.random()+0),n=localStorage.getItem("mainHero");if((n-=t)>0&&(localStorage.setItem("mainHero",n),setTimeout(()=>{e.innerHTML=n+" HP"},3e3),alert("Your answer is incorrect")),n<=0){let t=+localStorage.getItem("monstersKilled"),n=+localStorage.getItem("curplayerid"),o=localStorage.getItem("rating");o=null==o?[]:JSON.parse(o);let s=JSON.parse(localStorage.getItem("players"))[n],a={name:s.lastName+" "+s.firstName,streak:t};o.push(a),o=o.sort((e,t)=>t.streak-e.streak).slice(0,10),localStorage.setItem("rating",JSON.stringify(o));const l=document.querySelector("#goLP"),c=document.querySelector(".game-over"),i=document.querySelector(".lowbody");let d=localStorage.getItem("rating");d=null==d?[]:JSON.parse(d);for(var r=0;r<d.length;r++){let e=document.createElement("tr"),t=document.createElement("td"),n=document.createElement("td");t.innerText=d[r].name,n.innerText=d[r].streak,e.appendChild(t),e.appendChild(n),i.appendChild(e)}setTimeout(()=>{e.innerHTML="0 HP",c.style.display="flex"},3e3),l.addEventListener("click",e=>{location.href="../../index.html"})}}var A=n("./src/img/spell2.png"),P=n.n(A);function R(){const e=document.querySelector("canvas").getContext("2d");let t=260,n=new Image;n.onload=function(){var r;(r=new Audio).src="../src/sound/deathPulse.mp3",r.volume=.5,r.autoplay=!0;let o=setInterval(()=>{e.clearRect(t,445,128,128),e.drawImage(n,t,445),t<900?t++:(e.clearRect(900,445,128,128),clearInterval(o))},3)},n.src=P.a}var D=n("./src/img/spell1.png"),C=n.n(D);function U(){const e=document.querySelector("canvas").getContext("2d");let t=900,n=new Image;n.onload=function(){!function(){let e=new Audio;e.src="../src/sound/dragonSlave.mp3",e.volume=.5,e.autoplay=!0}();let r=setInterval(()=>{e.clearRect(t,445,128,128),e.drawImage(n,t,445),t>260?t--:(e.clearRect(260,445,128,128),clearInterval(r))},3)},n.src=C.a}const N=document.querySelector("#callMathMet"),J=document.querySelector(".casts"),B=document.querySelector(".mathMet"),F=document.querySelector("#sendMathAnswer"),G=document.querySelector("#mathMainMenu"),$=document.querySelector("#userMathInput"),K=document.querySelector(".task");let W=[];N.addEventListener("click",e=>{J.style.display="none",B.style.display="flex",W=function(){let e=0,t=0,n=["+","-","/","*"],r=Math.floor(Math.random()*n.length);return e=Math.floor(30*Math.random()+0),t=Math.floor(30*Math.random()+0),[n[r],e,t]}(),K.innerHTML=W[1]+" "+W[0]+" "+W[2]});G.addEventListener("click",e=>{B.style.display="none",J.style.display="flex"}),F.addEventListener("click",e=>{$.value===function(){let e=0;switch(W[0]){case"+":return""+(e=W[1]+W[2]);case"-":return""+(e=W[1]-W[2]);case"*":return""+(e=W[1]*W[2]);case"/":return e=(e=W[1]/W[2])%2==0?e.toFixed(0):e.toFixed(1)}}()?(O(),B.style.display="none",K.innerHTML="",R(),setTimeout(()=>{J.style.display="flex"},3e3)):(_(),B.style.display="none",K.innerHTML="",U(),setTimeout(()=>{J.style.display="flex"},3e3))});const z=document.querySelector(".casts"),Q=document.querySelector(".audioMet"),X=document.querySelector("#sendAudioAnswer"),Y=document.querySelector("#audioMainMenu"),V=document.querySelector("#callAudioMet"),Z=document.querySelector("#userAudioInput"),ee=document.querySelector("audio"),te={"../src/sound/activity.mp3":"activity","../src/sound/dog.mp3":"dog","../src/sound/global.mp3":"global","../src/sound/inspiration.mp3":"inspiration","../src/sound/mind.mp3":"mind","../src/sound/strategy.mp3":"strategy","../src/sound/transfer.mp3":"transfer"};let ne="";V.addEventListener("click",e=>{z.style.display="none",ne=Object.keys(te)[Math.floor(Math.random()*Object.keys(te).length)],ee.src=ne,Q.style.display="flex"}),Y.addEventListener("click",e=>{Q.style.display="none",z.style.display="flex"}),X.addEventListener("click",e=>{Z.value===te[ne]?(O(),Q.style.display="none",ee.src="",R(),setTimeout(()=>{z.style.display="flex"},3e3)):(_(),Q.style.display="none",ee.src="",U(),setTimeout(()=>{z.style.display="flex"},3e3))});const re=document.querySelector("#callFalsyMet"),oe=document.querySelector(".casts"),se=document.querySelector(".falsyMet"),ae=document.querySelector("#sendFalsyAnswer"),le=document.querySelector("#FalsyMainMenu"),ce=document.querySelector("#userFalsyInput"),ie=document.querySelector("#falsyText");let de={"Writer Mark Twain invented and patented a bra clasp":["true","True"],"The Eiffel Tower in the summer becomes higher by 15 centimeters":["true","True"],'The space on the forehead between the eyebrows is called a "racket"':["false","False"],"The flea can accelerate faster than the space shuttle":["true","True"],"Human DNA and banana are similar to 90%":["false","False"]},ue="";re.addEventListener("click",e=>{oe.style.display="none",ue=Object.keys(de)[Math.floor(Math.random()*Object.keys(de).length)],ie.innerHTML=ue,se.style.display="flex"}),le.addEventListener("click",e=>{se.style.display="none",oe.style.display="flex"}),ae.addEventListener("click",e=>{let t=[],n=!1;t=de[ue];for(let e=0;e<t.length;e++)ce.value===t[e]&&(n=!0);n?(O(),se.style.display="none",ie.innerHTML="",R(),setTimeout(()=>{oe.style.display="flex"},3e3)):(_(),se.style.display="none",ie.innerHTML="",U(),setTimeout(()=>{oe.style.display="flex"},3e3))});const pe={dog:["собака","пес","собачка"],task:["задача","урок"],cat:["кот","кошка"],mind:["разум","ум","мнение"],game:["развлечение","игра","партия"],skirt:["юбка","подол","край"],global:["глобальный","мировой","общий","всеобщий"],activity:["активность","деятельность","энергия"],amount:["количество","сумма","итог"],blind:["слепой","слепить","штора"],cartoon:["мультфильм","карикатура","комикс","мультик"],transfer:["перевод","передача","трансфер"],dictionary:["словарь"],environment:["окружающая среда","окружение","среда"],famous:["известный","знаменитый","замечательный"],horror:["ужас","ужастик"],inspiration:["вдохновение","воодушевление","вдох"],jealous:["завистливый","ревнивый","заботливый","зависть","ревность"],lucky:["счастливый","везучий","удачливый"],message:["сообщение","послание","письмо"],mysterious:["загадочный","таинственный","непостижимый"],realize:["реализовать","понимать","осуществлять"]},fe=document.querySelector("#callTranslateMet"),ye=document.querySelector(".casts"),me=document.querySelector(".translateMet"),he=document.querySelector("#sendTranslateAnswer"),ge=document.querySelector("#translateMainMenu"),ve=document.querySelector("#userTranslateInput"),be=document.querySelector("#translateText");let Me="";fe.addEventListener("click",e=>{ye.style.display="none",me.style.display="flex",Me=Object.keys(pe)[Math.floor(Math.random()*Object.keys(pe).length)],be.innerHTML=Me}),ge.addEventListener("click",e=>{me.style.display="none",ye.style.display="flex"}),he.addEventListener("click",e=>{let t=[],n=!1;t=pe[Me];for(let e=0;e<t.length;e++)ve.value===t[e]&&(n=!0);n?(O(),me.style.display="none",be.innerHTML="",R(),setTimeout(()=>{ye.style.display="flex"},3e3)):(_(),me.style.display="none",be.innerHTML="",U(),setTimeout(()=>{ye.style.display="flex"},3e3))});const Se=document.querySelector("#callMissedMet"),xe=document.querySelector(".casts"),we=document.querySelector(".missedMet"),qe=document.querySelector("#sendMissedAnswer"),ke=document.querySelector("#missedMainMenu"),Te=document.querySelector("#userMissedInput"),Le=document.querySelector("#missedText");let je={com_unity:"m",Eif_el:"f",for_head:"e",ac_lerate:"c",simi_lar:"",develo_ment:"p"},He="";Se.addEventListener("click",e=>{xe.style.display="none",He=Object.keys(je)[Math.floor(Math.random()*Object.keys(je).length)],Le.innerHTML=He,we.style.display="flex"}),ke.addEventListener("click",e=>{we.style.display="none",xe.style.display="flex"}),qe.addEventListener("click",e=>{Te.value===je[He]?(O(),we.style.display="none",Le.innerHTML="",R(),setTimeout(()=>{xe.style.display="flex"},3e3)):(_(),we.style.display="none",Le.innerHTML="",U(),setTimeout(()=>{xe.style.display="flex"},3e3))});const Ie=document.querySelector("#callSeqMet"),Ee=document.querySelector(".casts"),Oe=document.querySelector(".seqMet"),_e=document.querySelector("#sendSeqAnswer"),Ae=document.querySelector("#seqMainMenu"),Pe=document.querySelector("#userSeqInput"),Re=document.querySelector("#seqText");let De={"2, 4, 6, 8":"10","1000, 1, 500, ?, 50, 2.718":"500","Чебышев, Тургенев, Моцарт, Лермонтов, Чайковский, Берлиоз":"Моцарт","П, В, С, ?, П, С, В":"Ч","Ь, Ь, Т, Ь, ?, Ь, Ь, Т, Ь, Ь, Ь, Ь":"Й"},Ce="";Ie.addEventListener("click",e=>{Ee.style.display="none",Ce=Object.keys(De)[Math.floor(Math.random()*Object.keys(De).length)],Re.innerHTML=Ce,Oe.style.display="flex"}),Ae.addEventListener("click",e=>{Oe.style.display="none",Ee.style.display="flex"}),_e.addEventListener("click",e=>{Pe.value===De[Ce]?(O(),Oe.style.display="none",Re.innerHTML="",R(),setTimeout(()=>{Ee.style.display="flex"},3e3)):(_(),Oe.style.display="none",Re.innerHTML="",U(),setTimeout(()=>{Ee.style.display="flex"},3e3))});const Ue=document.querySelector("#callActMet"),Ne=document.querySelector(".casts"),Je=document.querySelector(".actMet"),Be=document.querySelector("#sendActAnswer"),Fe=document.querySelector("#actMainMenu"),Ge=document.querySelector("#userActInput"),$e=document.querySelector("img");let Ke={"../src/img/Smith.PNG":["will smith","Will Smith"],"../src/img/keanureeves.PNG":["Keanu Reeves","keanu reeves"],"../src/img/bacon.PNG":["Kevin Bacon","kevin bacon"],"../src/img/redford.PNG":["Robert Radford","robert radford"],"../src/img/jaredleto.PNG":["Jared Leto","jared leto"]},We="";Ue.addEventListener("click",e=>{Ne.style.display="none",We=Object.keys(Ke)[Math.floor(Math.random()*Object.keys(Ke).length)],$e.src=We,Je.style.display="flex"}),Fe.addEventListener("click",e=>{Je.style.display="none",Ne.style.display="flex"}),Be.addEventListener("click",e=>{let t=[],n=!1;t=Ke[We];for(let e=0;e<t.length;e++)Ge.value===t[e]&&(n=!0);n?(O(),Je.style.display="none",$e.src="",R(),setTimeout(()=>{Ne.style.display="flex"},3e3)):(_(),Je.style.display="none",$e.src="",U(),setTimeout(()=>{Ne.style.display="flex"},3e3))});const ze=document.querySelector("#callQMet"),Qe=document.querySelector(".casts"),Xe=document.querySelector(".qMet"),Ye=document.querySelector("#sendQAnswer"),Ve=document.querySelector("#qMainMenu"),Ze=document.querySelector("#userQInput"),et=document.querySelector("#qText");let tt={"How many months a year have 28 days?":["all","12","everyone"],"What can you see with your eyes closed?":["dreams","sleep"],"What in the fire does not burn and does not sink in the water?":["ice"],"Whom do Australians call sea osoy?":["medusa","jellyfish"],"Moscow used to be called white stone. And what city was called black?":["Chernigov","chernigov"]},nt="";ze.addEventListener("click",e=>{Qe.style.display="none",nt=Object.keys(tt)[Math.floor(Math.random()*Object.keys(tt).length)],et.innerHTML=nt,Xe.style.display="flex"}),Ve.addEventListener("click",e=>{Xe.style.display="none",Qe.style.display="flex"}),Ye.addEventListener("click",e=>{let t=[],n=!1;t=tt[nt];for(let e=0;e<t.length;e++)Ze.value===t[e]&&(n=!0);n?(O(),Xe.style.display="none",et.innerHTML="",R(),setTimeout(()=>{Qe.style.display="flex"},3e3)):(_(),Xe.style.display="none",et.innerHTML="",U(),setTimeout(()=>{Qe.style.display="flex"},3e3))});const rt=document.querySelector("#callLessMet"),ot=document.querySelector(".casts"),st=document.querySelector(".lessMet"),at=document.querySelector("#sendLessAnswer"),lt=document.querySelector("#lessMainMenu"),ct=document.querySelector("#userLessInput"),it=document.querySelector("#lessText");let dt={"1mbit __ 100kbyt":">","1kg fluff __ 1kg iron":"=","Africa __ Russia":">","electron __ atom":"<","virus __ bacterium":"<"},ut="";rt.addEventListener("click",e=>{ot.style.display="none",ut=Object.keys(dt)[Math.floor(Math.random()*Object.keys(dt).length)],it.innerHTML=ut,st.style.display="flex"}),lt.addEventListener("click",e=>{st.style.display="none",ot.style.display="flex"}),at.addEventListener("click",e=>{let t=[],n=!1;t=dt[ut];for(let e=0;e<t.length;e++)ct.value===t[e]&&(n=!0);n?(O(),st.style.display="none",it.innerHTML="",R(),setTimeout(()=>{ot.style.display="flex"},3e3)):(_(),st.style.display="none",it.innerHTML="",U(),setTimeout(()=>{ot.style.display="flex"},3e3))});let pt=document.createElement("canvas");pt.getContext("2d");pt.width=1280,pt.height=720,document.body.appendChild(pt);const ft=document.querySelector(".monster-HP"),yt=document.querySelector(".mainHero-HP"),mt=document.querySelector(".menu-open"),ht=document.querySelector(".casts");mt.addEventListener("click",e=>{mt.style.display="none",ht.style.display="flex"}),function(){const e=document.querySelector("canvas").getContext("2d");let t=new Image;t.onload=function(){e.drawImage(t,0,570)},t.src=o.a}(),function(){const e=document.querySelector("canvas").getContext("2d");let t=new Image;t.onload=function(){e.drawImage(t,100,445)},t.src=a.a}(),E(),localStorage.setItem("monsterHP",100),localStorage.setItem("mainHero",100),function(){let e=document.querySelector(".mainHero-name"),t=+localStorage.getItem("curplayerid"),n=localStorage.getItem("rating");n=null==n?[]:JSON.parse(n);let r=JSON.parse(localStorage.getItem("players"))[t];e.innerHTML=`${r.lastName} ${r.firstName}`,ft.innerHTML="100 HP",yt.innerHTML="100 HP"}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,